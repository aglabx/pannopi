#FASTQC#########################################################################################################

rule fastqc1:
    input:
        forward_read = config["raw_fastq_1"],
        rewerse_read = config["raw_fastq_2"]
    conda:
        envs.fastqc
    output:
        fastq_file_1 = config["fastqc_file1"],
    params:
        fastqc1_dir = directory(config["fastqc1_dir"])
    shell:
        """
        fastqc \
            -o {params.fastqc1_dir} \
            -t 32 \
            {input}
        """

rule fastqc2:
    input:
        rules.rmdub.output.rmdub_out_file1,
        rules.rmdub.output.rmdub_out_file2
    conda:
        envs.fastqc
    output:
        fastq_file_2 = config["fastqc_file2"]
    params:
        fastqc2_dir = directory(config["fastqc2_dir"])
    shell:
        """
        fastqc \
            -o {params.fastqc2_dir} \
            -t 32 \
            {input}
        """

#JELLY FILES###################################################################################################

rule jellycount:
    input:
        rules.rmdub.output,
    conda:
        envs.jellyfish
    output:
        jellycount_file = config["jellycount_file"],
    shell:
        """
        jellyfish count \
            -m 23 \
            -t 32 \
            -s 2G \
            -C \
            -o {output} \
            {input}
        """

rule jellyhisto:
    input:
        rules.jellycount.output,
    conda:
        envs.jellyfish
    output:
        jellyhisto_file = config["jellyhisto_file"],
    shell:
        """
        jellyfish histo \
            -o {output} \
            {input}
        """

rule genomescope:
    input:
        rules.jellyhisto.output
    conda:
        envs.r
    output:
        scope_file = config["scope_file"]
    params:
        scope = "tools/genomescope/genomescope.R",
        scope_dir = directory(config["scope_dir"])
    shell:
        """
        Rscript {params.scope} {input} 23 100 {params.scope_dir} 1000
        """

rule quast:
    input:
        #contera = rules.contera.output.assembly_filtered,
        assembly = rules.assembly.output.assembly
#         ref = rules.reference.output
    conda:
        envs.quast
    output:
        config["quast_out_file"]
    params:
        directory(config["quast_dir"])
    shell:
        """
        quast -o {params} \
        {input}
        """