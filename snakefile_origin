import os
import os.path

raw_fastq_1 = "/mnt/projects/dzilov/o-test/ecoli19/Ecoli19-2_S2_L001_1.fastq"
raw_fastq_2 = "/mnt/projects/dzilov/o-test/ecoli19/Ecoli19-2_S2_L001_2.fastq"

#/mnt/projects/dzilov/o-test/Salmon1418/results/Salmon14-182_S4_L001_intrs_genes.txt

input1 = raw_fastq_1.split("/")
file_pref = input1[-1].split("_")
file1_pref = "_".join(file_pref[0:-1])
path_to_reads = "/".join(input1[0:-1])
#print(file1_pref)
reads_folder = input1[-2]
#print(reads_folder)
#print(path_to_reads)

config = {
        #TOOLS
        "v2trim" : "tools/v2trim/V2_trim.exe",
        "ill_ext" : "tools/v2trim/illumina_ext.data",
        "rmdub" : "tools/rmdub/rmdup.exe",
        "contera_path" : "tools/contera/contera.py",
        "eggnog_path" : "/mnt/projects/vdikaya/Tools/eggnog-mapper-1.0.3/emapper.py", # придумать как ставить еггног
        "blast_db" : "/mnt/projects/shared/ncbi/blast/db/nt", # тоже придумать
        "goobo" : "tools/goanno/GOanno.py",
        "obo_annotation" : "tools/goanno/go.obo",
        #PREFIXES
        "trim_in_prefix" : path_to_reads + "/" + file1_pref,
        "trim_out_prefix" : path_to_reads + "/trim/" + file1_pref,
        "rmdub_in_prefix" : path_to_reads + "/trim/" + file1_pref + ".trim",
        "rmdub_out_prefix" : path_to_reads + "/rmdub/" + file1_pref + ".rm",
        #START OPEARATIONS FILES
        "trim_out_file_1" :  path_to_reads + "/trim/" + file1_pref + ".trim_1.fastq",
        "trim_out_file_2" : path_to_reads + "/trim/" + file1_pref + ".trim_2.fastq",
        "rmdub_file_1" : path_to_reads + "/rmdub/" + file1_pref + ".rm_1.fastq",
        "rmdub_file_2" : path_to_reads + "/rmdub/" + file1_pref + ".rm_2.fastq",
        #FASTQC
        "fastqc1_dir" : path_to_reads + "/fastqc/" + "fastqc_raw",
        "fastqc2_dir" : path_to_reads + "/fastqc/" + "fastqc_clean",
        "fastqc_file1" : path_to_reads + "/fastqc/" + "fastqc_raw/" + file1_pref + "_1_fastqc.zip",
        "fastqc_file2" : path_to_reads + "/fastqc/" + "fastqc_clean/" + file1_pref + ".rm_2_fastqc.zip",
        #JELLY FILES
        "jellycount_file" : path_to_reads + "/jellyfish/" + file1_pref + ".jf2",
        "jellyhisto_file" : path_to_reads + "/jellyfish/" + file1_pref + ".histo",
        "scope_dir" : path_to_reads + "/jellyfish/scope/",
        "scope_file" : path_to_reads +  "/jellyfish/scope/plot.png",
        #ASSEMBLY
        "spades_scaff" : path_to_reads + "/unicycler/spades_assembly/assembly/scaffolds.fasta",
        "uni_dir" : path_to_reads + "/unicycler",
        "uni_assembly" :  path_to_reads + "/unicycler/assembly.fasta",
        "assembly_gfa" : path_to_reads + "/unicycler/assembly.gfa",
        "scaffolds_gfa" :  path_to_reads + "/unicycler/spades_assembly/assembly/assembly_graph_with_scaffolds.gfa",

        #QUALITY CONTROL
        "quast_dir" : path_to_reads + "/quast",
        "quast_out_file" : path_to_reads + "/quast/report.txt",
        "reference_dir" : path_to_reads + "/reference/",
        "reference_file" : path_to_reads + "/reference/" + file1_pref + ".fna",

        #UNI ANNOTATION BRANCH
        #BLAST
        "blastn_uni_out" : path_to_reads + "/blast/unicycler/" + file1_pref +".outfmt6",
        # FILTERING
        "filter_uni_out" : path_to_reads + "/blast/unicycler/" + file1_pref + ".best_single_hits.blastn",
        "index_uni_file" :  path_to_reads + "/unicycler/assembly.fasta.fai",
        "assembly_filtered" : path_to_reads + "/contera/unicycler/assembly_filtered.fasta",
        "unicon_dir" :  path_to_reads + "/contera/unicycler/",
        "unicon_report" : path_to_reads + "/contera/unicycler/" + file1_pref + ".contera_report.txt",
        # ANNOTATION
        "prokka_uni_dir" : path_to_reads + "/prokka/unicycler/",
        "prokka_uni_faa" : path_to_reads + "/prokka/unicycler/" + file1_pref + ".faa",
        # FUNCTIONAL ANNOTATION
        "eggnog_uni_dir" : path_to_reads + "/eggnog/unicycler/",
        "eggnog_uni_ann" : path_to_reads + "/eggnog/unicycler/" + file1_pref + ".emapper.annotations",
        "goann_uni_outdir" : path_to_reads + "/goann/unicycler/",
        "goann_uni_out" : path_to_reads + "/goann/unicycler/" + file1_pref + "_genes_analysis.txt",
        "funcan_dir_uni" : path_to_reads + "/funcan/unicycler/",
        "megares_uni" : path_to_reads + "/funcan/unicycler/megares_report.txt",
        "ncbi_uni" : path_to_reads + "/funcan/unicycler/ncbi_report.txt",
        "virulence_uni" : path_to_reads + "/funcan/unicycler/virulence_report.txt",
        "plasmids_uni" : path_to_reads + "/funcan/unicycler/plasmids_report.txt",
        "serotype_uni" : path_to_reads + "/funcan/unicycler/serotype_ecoli.txt",
        "funcan_sum_uni" : path_to_reads + "/funcan/unicycler/AMR_and_virulence_report.txt",
        "mlst_uni" : path_to_reads + "/funcan/unicycler/mlst_type.txt",
        #RESULT STEP
        "results_uni_path" : path_to_reads + "/results/unicycler/",
        "results_uni_file" : path_to_reads + "/results/unicycler/" + file1_pref + "_genes_analysis.txt",

        #SPADES ANNOTATION BRANCH
        # BLAST
        "blastn_spad_out" : path_to_reads + "/blast/spades/" + file1_pref +".outfmt6",
         # FILTERING
        "filter_spad_out" : path_to_reads + "/blast/spades/" + file1_pref + ".best_single_hits.blastn",
        "index_spad_file" : path_to_reads + "/unicycler/spades_assembly/assembly/scaffolds.fasta.fai",
        "scaffolds_filtered" : path_to_reads + "/contera/spades/scaffolds_filtered.fasta",
        "spadcon_dir" :  path_to_reads + "/contera/spades/",
        "spadcon_report" : path_to_reads + "/contera/spades/" + file1_pref + ".contera_report.txt",
         # ANNOTATION
        "prokka_spad_dir" : path_to_reads + "/prokka/spades",
        "prokka_spad_faa" : path_to_reads + "/prokka/spades/" + file1_pref + ".faa",
        "prokka_spad_gbk" : path_to_reads + "/prokka/spades/" + file1_pref + ".gbk",
        # FUNCTIONAL ANNOTATION
        "eggnog_spad_dir" : path_to_reads + "/eggnog/spades/",
        "eggnog_spad_ann" : path_to_reads + "/eggnog/spades/" + file1_pref + ".emapper.annotations",
        "funcan_dir_spad" : path_to_reads + "/funcan/spades/",
        "megares_spad" : path_to_reads + "/funcan/spades/megares_report.txt",
        "ncbi_spad" : path_to_reads + "/funcan/spades/ncbi_report.txt",
        "virulence_spad" : path_to_reads + "/funcan/spades/virulence_report.txt",
        "plasmids_spad" : path_to_reads + "/funcan/spades/plasmids_report.txt",
        "serotype_spad" : path_to_reads + "/funcan/spades/serotype_ecoli.txt",
        "funcan_sum_spad" : path_to_reads + "/funcan/spades/AMR_and_virulence_report.txt",
        "mlst_spad" : path_to_reads + "/funcan/spades/mlst_type.txt",
        "goann_spad_outdir" : path_to_reads + "/goann/spades/",
        "goann_spad_out" : path_to_reads + "/goann/spades/" + file1_pref + "_genes_analysis.txt",
        #RESULT STEP
        "results_spad_path" : path_to_reads + "/results/spades/",
        "results_spad_file" : path_to_reads + "/results/spades/" + file1_pref + "_genes_analysis.txt",
     }

rule all:
    input:
        res_spad = config["results_spad_file"],
        res_uni = config["results_uni_file"]

#START OPERATIONS##################################################################################

rule trim:
    message:
        "Trimming the raw reads"
    input:
        forward_read = raw_fastq_1,
        rewerse_read = raw_fastq_2
    output:
        trim_out_file1 = config["trim_out_file_1"],
        trim_out_file2 = config["trim_out_file_2"]
    params:
        in_prefix = config["trim_in_prefix"],
        out_prefix = config["trim_out_prefix"],
        v2trim_path = config["v2trim"],
        ill_ext_path = config["ill_ext"],
    shell:
        """
        {params.v2trim_path} \
            {params.in_prefix} \
            {params.out_prefix} \
            20 0 fastq \
            {params.ill_ext_path}
        """

rule rmdub:
    message:
        "Optical duplacates deliting"
    input:
        rules.trim.output
    output:
        rmdub_out_file1 = config["rmdub_file_1"],
        rmdub_out_file2 = config["rmdub_file_2"]
    params:
        in_prefix = config["rmdub_in_prefix"],
        out_prefix = config["rmdub_out_prefix"],
        rmdub_path = config["rmdub"],
    shell:
        """
        {params.rmdub_path} \
            {params.in_prefix} \
            {params.out_prefix} \
            3000 3 0,30
        """

#FASTQC#########################################################################################################

rule fastqc1:
    input:
        forward_read = raw_fastq_1,
        rewerse_read = raw_fastq_2
    conda:
        "envs/fastqc.yaml"
    output:
        fastq_file_1 = config["fastqc_file1"],
    params:
        fastqc1_dir = directory(config["fastqc1_dir"])
    shell:
        """
        fastqc \
            -o {params.fastqc1_dir} \
            -t 32 \
            {input}
        """

rule fastqc2:
    input:
        rules.rmdub.output.rmdub_out_file1,
        rules.rmdub.output.rmdub_out_file2
    conda:
        "envs/fastqc.yaml"
    output:
        fastq_file_2 = config["fastqc_file2"]
    params:
        fastqc2_dir = directory(config["fastqc2_dir"])
    shell:
        """
        fastqc \
            -o {params.fastqc2_dir} \
            -t 32 \
            {input}
        """

#JELLY FILES###################################################################################################

rule jellycount:
    input:
        rules.rmdub.output,
    conda:
        "envs/jellyfish.yaml",
    output:
        jellycount_file = config["jellycount_file"],
    shell:
        """
        jellyfish count \
            -m 23 \
            -t 32 \
            -s 2G \
            -C \
            -o {output} \
            {input}
        """

rule jellyhisto:
    input:
        rules.jellycount.output,
    conda:
        "envs/jellyfish.yaml",
    output:
        jellyhisto_file = config["jellyhisto_file"],
    shell:
        """
        jellyfish histo \
            -o {output} \
            {input}
        """

rule genomescope:
    input:
        rules.jellyhisto.output
    conda:
        "envs/r.yaml"
    output:
        scope_file = config["scope_file"]
    params:
        scope = "tools/genomescope/genomescope.R",
        scope_dir = directory(config["scope_dir"])
    shell:
        """
        Rscript {params.scope} {input} 23 100 {params.scope_dir} 1000
        """

#ASSEMBLY###########################################################################################

rule unicycler:
    input:
        forward = rules.rmdub.output.rmdub_out_file1,
        reverse = rules.rmdub.output.rmdub_out_file2
    conda:
        "envs/unicycler.yaml"
    threads: workflow.cores
    output:
        assembly = config["uni_assembly"],
        assembly_gfa = config["assembly_gfa"],
        scaffolds = config["spades_scaff"],
        scaffolds_gfa = config["scaffolds_gfa"]
    params:
        dir = directory(config["uni_dir"])
    shell:
        "unicycler -1 {input.forward} -2 {input.reverse} -t {threads} --keep 3 -o {params}"

uniout = rules.unicycler.output

#SPADES BRUNCH #####################################################################################################

rule blastn_spad:
    input:
        uniout.scaffolds,
    conda:
        "envs/blast.yaml"
    threads: workflow.cores * 0.5
    output:
        blastn_out = config["blastn_spad_out"]
    params:
        blast_db = config["blast_db"]
    shell:
        """
        blastn \
            -query {input} \
            -db {params.blast_db} \
            -max_target_seqs 5 \
            -outfmt 6 \
            -evalue 1e-5 \
            -num_threads {threads} \
            -out {output}
        """

rule filter_spad:
    input:
        rules.blastn_spad.output
    output:
        filter_out = config["filter_spad_out"]
    shell:
        """
        less {input} | \
        sort -k1,1 -k12,12nr -k11,11n | \
        sort -u -k1,1 --merge > {output}
        """

rule index_spad:
    input:
        uniout.scaffolds,
    conda:
        "envs/samtools.yaml"
    output:
        index_file = config["index_spad_file"]
    shell:
        """
        samtools faidx {input}
        """

rule spadcon:
    input:
        scaffold = uniout.scaffolds,
        index_file = rules.index_spad.output,
        filter_out = rules.filter_spad.output,
    output:
        scaffolds_filtered = config["scaffolds_filtered"],
        report = config["spadcon_report"]
    params:
        contera_path = config["contera_path"],
        outdir = directory(config["spadcon_dir"])
    shell:
        """
        python {params.contera_path} \
            -s {input.scaffold} \
            -f {input.index_file} \
            -b {input.filter_out} \
            -o {params.outdir}
        """

spadconout = rules.spadcon.output

rule prokka_spad:
    input:
        spadconout.scaffolds_filtered
    conda:
        "envs/prokka.yaml"
    threads: workflow.cores * 0.5
    output:
        prokka_faa = config["prokka_spad_faa"],
        prokka_gbk = config["prokka_spad_gbk"],
    params:
        dir = directory(config["prokka_spad_dir"]),
        prokka_prefix = file1_pref
    shell:
        """
        prokka \
            --force \
            --cpus {threads} \
            --outdir {params.dir} \
            --prefix {params.prokka_prefix} \
            {input}
        """

rule eggnog_spad:
    input:
        rules.prokka_spad.output.prokka_faa
    output:
        config["eggnog_spad_ann"]
    threads: workflow.cores * 0.5
    params:
        out_pref = file1_pref,
        eggnog = config["eggnog_path"],
        eggnog_dir = directory(config["eggnog_spad_dir"])
    shell:
        """
        python2 {params.eggnog} \
            -i {input} \
            --output_dir {params.eggnog_dir} \
            --output {params.out_pref} \
            -m diamond \
            --report_orthologs \
            --cpu {threads} \
            --resume
        """

rule megares_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        megares_report = config["megares_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate --db megares {input} > {output}"

rule ncbi_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        ncbi_report = config["ncbi_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate {input} > {output}"

rule plasmid_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        plasmids_report = config["plasmids_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate --db plasmidfinder {input} > {output}"

rule virulence_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        plasmids_report = config["virulence_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate --db vfdb {input} > {output}"

rule serotype_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        plasmids_report = config["serotype_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate --db ecoh {input} > {output}"

rule funcan_sum_spad:
    input:
        megares = rules.megares_spad.output,
        ncbi = rules.ncbi_spad.output,
        plasmids = rules.plasmid_spad.output,
        virulence = rules.virulence_spad.output,
        serotype = rules.serotype_spad.output,
    output:
        whole_report = config["funcan_sum_spad"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_spad"])
    shell:
        "abricate --summary {input} > {output}"

rule mlst_spad:
    input:
        scaffolds_filtered = spadconout.scaffolds_filtered
    output:
        config["mlst_spad"]
    conda:
        "envs/mlst.yaml"
    shell:
        """
        mlst {input} > {output}
        """

#rule phispy:
 #   input:
  #      rules.prokka_spad.output.prokka_gbk
  #  conda:
   #     "envs/phispy.yaml"
    #output:




rule goann_spad:
    input:
        egg = rules.eggnog_spad.output,
    output:
        config["goann_spad_out"]
    params:
        obo_annotation = config["obo_annotation"],
        goobo = config["goobo"],
        outdir = config["goann_spad_outdir"]
    shell:
        """
        python {params.goobo} -g {params.obo_annotation} -e {input.egg} -o {params.outdir}
        """

#UNICYCLER BRUNCH##############################################################################################
rule blastn_uni:
    input:
        uniout.assembly,
    conda:
        "envs/blastn.yaml"
    threads: workflow.cores * 0.5
    output:
        blastn_out = config["blastn_uni_out"]
    params:
        blast_db = config["blast_db"]
    shell:
        """
        blastn \
            -query {input} \
            -db {params.blast_db} \
            -max_target_seqs 5 \
            -outfmt 6 \
            -evalue 1e-5 \
            -num_threads {threads} \
            -out {output}
        """

rule filter_uni:
    input:
        rules.blastn_uni.output
    output:
        filter_out = config["filter_uni_out"]
    shell:
        """
        less {input} | \
        sort -k1,1 -k12,12nr -k11,11n | \
        sort -u -k1,1 --merge > {output}
        """

rule index_uni:
    input:
        uniout.assembly,
    conda:
        "envs/samtools.yaml"
    output:
        index_file = config["index_uni_file"]
    shell:
        """
        samtools faidx {input}
        """

rule unicon:
    input:
        scaffold = uniout.assembly,
        index_file = rules.index_uni.output,
        filter_out = rules.filter_uni.output,
    output:
        assembly_filtered = config["assembly_filtered"]
    params:
        contera_path = config["contera_path"],
        outdir = directory(config["unicon_dir"])
    shell:
        """
        python {params.contera_path} \
            -s {input.scaffold} \
            -f {input.index_file} \
            -b {input.filter_out} \
            -o {params.outdir}
        """

uniconout = rules.unicon.output

rule prokka_uni:
    input:
        uniconout.assembly_filtered
    conda:
        "envs/prokka.yaml"
    threads: workflow.cores * 0.5
    output:
        prokka_faa = config["prokka_uni_faa"]
    params:
        dir = directory(config["prokka_uni_dir"]),
        prokka_prefix = file1_pref
    shell:
        """
        prokka \
            --force \
            --cpus {threads} \
            --outdir {params.dir} \
            --prefix {params.prokka_prefix} \
            {input}
        """

rule eggnog_uni:
    input:
        rules.prokka_uni.output
    output:
        config["eggnog_uni_ann"]
    threads: workflow.cores * 0.5
    params:
        out_pref = file1_pref,
        eggnog = config["eggnog_path"],
        eggnog_dir = directory(config["eggnog_uni_dir"])
    shell:
        """
        python2 {params.eggnog} \
            -i {input} \
            --output_dir {params.eggnog_dir} \
            --output {params.out_pref} \
            -m diamond \
            --report_orthologs \
            --cpu {threads} \
            --resume
        """

rule megares_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        megares_report = config["megares_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate --db megares {input} > {output}"

rule ncbi_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        ncbi_report = config["ncbi_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate {input} > {output}"

rule plasmid_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        plasmids_report = config["plasmids_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate --db plasmidfinder {input} > {output}"

rule virulence_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        plasmids_report = config["virulence_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate --db vfdb {input} > {output}"

rule serotype_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        plasmids_report = config["serotype_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate --db ecoh {input} > {output}"

rule funcan_sum_uni:
    input:
        megares = rules.megares_uni.output,
        ncbi = rules.ncbi_uni.output,
        plasmids = rules.plasmid_uni.output,
        virulence = rules.virulence_uni.output,
        serotype = rules.serotype_uni.output,
    output:
        whole_report = config["funcan_sum_uni"]
    conda:
        "envs/abricate.yaml"
    params:
        outdir = directory(config["funcan_dir_uni"])
    shell:
        "abricate --summary {input} > {output}"

rule mlst_uni:
    input:
        assembly_filtered = uniconout.assembly_filtered
    output:
        config["mlst_uni"]
    conda:
        "envs/mlst.yaml"
    shell:
        """
        mlst {input} > {output}
        """

rule goann_uni:
    input:
        egg = rules.eggnog_uni.output,
    output:
        config["goann_uni_out"]
    params:
        obo_annotation = config["obo_annotation"],
        goobo = config["goobo"],
        outdir = config["goann_uni_outdir"]
    shell:
        """
        python {params.goobo} -g {params.obo_annotation} -e {input.egg} -o {params.outdir}
        """


##QUALITY CINTROL AND RESULTS#####################################################################################
# rule reference:
#     input:
#         contera = spadconout.report
#     conda:
#         "envs/ncbi_download.yaml"
#     output:
#         ref_file = config["reference_file"]
#     params:
#         ref_dir = directory(config["reference_dir"]),
#         refdown = "tools/reference_download/refdown.py"
#     shell:
#         """
#         {params.refdown} -c {input} -o {params.ref_dir}
#         """

rule quast:
    input:
        contera_uni = rules.unicon.output,
        contera_spad = spadconout.scaffolds_filtered,
        spades = uniout.scaffolds,
        uni = uniout.assembly,
#         ref = rules.reference.output
    conda:
        "envs/quast.yaml"
    output:
        config["quast_out_file"]
    params:
        directory(config["quast_dir"])
    shell:
        """
        quast -o {params} {input.contera_uni} {input.contera_spad} {input.spades} {input.uni}
        """

rule results_spad:
    input:
        contera = rules.spadcon.output,
        egg = rules.eggnog_spad.output,
        jelly = rules.jellyhisto.output.jellyhisto_file,
        fast1 = rules.fastqc1.output,
        fast2 = rules.fastqc2.output,
        quast = rules.quast.output,
        whole_report = rules.funcan_sum_spad.output,
        goann = rules.goann_spad.output
    output:
        results_file = config["results_spad_file"]
    params:
        path = directory(config["results_spad_path"])
    shell:
        "cp {input} {params}"

rule results_uni:
    input:
        contera = rules.unicon.output,
        egg = rules.eggnog_uni.output,
        scope = rules.genomescope.output,
        fast1 = rules.fastqc1.output,
        fast2 = rules.fastqc2.output,
        quast = rules.quast.output,
        whole_report = rules.funcan_sum_uni.output,
        goann = rules.goann_uni.output,
    output:
        results_file = config["results_uni_file"],
    params:
        path = directory(config["results_uni_path"])
    shell:
        "cp {input} {params}"
